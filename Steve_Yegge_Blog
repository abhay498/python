Source : http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html

1. The warm-up

Long-term warming up means: study and practice for a week or two before the interview.
You want your mind to be in the general "mode" of problem solving on whiteboards.
If you can do it on a whiteboard, every other medium (laptop, shared network document, whatever) is a cakewalk.
So, plan for the whiteboard.

Short-term warming up means: get lots of rest the night before, and then do intense,
fast-paced warm-ups the morning of the interview.

2. My absolute favorite for this kind of interview preparation is Steven Skiena's The Algorithm Design Manual.
   Other interviewers I know recommend Introduction to Algorithms.
   
3. Have a friend interview you.

4. As for short-term preparation, all you can really do is make sure you are as alert and warmed up as possible.
 Don't go in cold. Solve a few problems and read through your study books.
 Drink some coffee: it actually helps you think faster, believe it or not.
 Make sure you spend at least an hour practicing immediately before you walk into the interview.
 Treat it like a sports game or a music recital, or heck, an exam: if you go in warmed up you'll give your best performance.
 
5. Ask if they care about syntax.

6. It's OK (and highly encouraged) to ask a few clarifying questions, and occasionally verify with the interviewer
   that you're on the track they want you to be on. 
   
7. Some interviewers will mark you down if you just jump up and start coding, even if you get the code right.
   They'll say you didn't think carefully first, and you're one of those "let's not do any design" type cowboys.
   
8. So, even if you think you know the answer to the problem, ask some questions and talk about the approach you'll
   take a little before diving in.

9. On the flip side, don't take too long before actually solving the problem, or some interviewers will give you a
   delay-of-game penalty. Try to move (and write) quickly, since often interviewers want to get through more than one
   question during the interview, and if you solve the first one too slowly then they'll be out of time.
   They'll mark you down because they couldn't get a full picture of your skills. The benefit of the doubt is rarely
   given in interviewing.
   
10. Tech Prep Tips

    a. Algorithm Complexity: you need to know Big-O. It's a must.
	   If you struggle with basic big-O complexity analysis, then you are almost guaranteed not to get hired.
	   It's, like, one chapter in the beginning of one theory of computation book, so just go read it.
	   You can do it.

	b. Sorting: know how to sort. Don't do bubble-sort.
	   You should know the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort).
	   Merge sort can be highly useful in situations where quicksort is impractical, so take a look at it.
	   For God's sake, don't try sorting a linked list during the interview.

	c. Hashtables: hashtables are arguably the single most important data structure known to mankind.
	   You absolutely have to know how they work. Again, it's like one chapter in one data structures book,
	   so just go read about them. You should be able to implement one using only arrays in your favorite language,
	   in about the space of one interview.
	
	d. Trees: you should know about trees.
	   I'm tellin' ya: this is basic stuff, and it's embarrassing to bring it up, but some of you out there don't know basic tree construction, traversal and manipulation algorithms.
	   You should be familiar with binary trees, n-ary trees, and trie-trees at the very least.
	   Trees are probably the best source of practice problems for your long-term warmup exercises.
	   You should be familiar with at least one flavor of balanced binary tree, whether it's a red/black tree,
	   a splay tree or an AVL tree. You should actually know how it's implemented.
       You should know about tree traversal algorithms: BFS and DFS, and know the difference between inorder, postorder and preorder.
       You might not use trees much day-to-day, but if so, it's because you're avoiding tree problems.
	   You won't need to do that anymore once you know how they work. Study up!

	e. Graphs

	   Graphs are, like, really really important. More than you think. Even if you already think they're important,
	   it's probably more than you think.
       There are three basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list),
	   and you should familiarize yourself with each representation and its pros and cons.
       You should know the basic graph traversal algorithms: breadth-first search and depth-first search.
	   You should know their computational complexity, their tradeoffs, and how to implement them in real code.
       You should try to study up on fancier algorithms, such as Dijkstra and A*, if you get a chance.
	   They're really great for just about anything, from game programming to distributed computing to you name it.
	   You should know them.
       Whenever someone gives you a problem, think graphs.
	   They are the most fundamental and flexible way of representing any kind of a relationship,
	   so it's about a 50-50 shot that any interesting design problem has a graph involved in it.
	   Make absolutely sure you can't think of a way to solve it using graphs before moving on to other solution types.
	   This tip is important!
	
	f. Other data structures
	   You should study up on as many other data structures and algorithms as you can fit in that big noggin of yours.
	   You should especially know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,
	   and be able to recognize them when an interviewer asks you them in disguise.
	   You should find out what NP-complete means.
       Basically, hit that data structures book hard, and try to retain as much of it as you can, and you can't go wrong.

	g. Math
	   Some interviewers ask basic discrete math questions.
	   This is more prevalent at Google than at other places I've been, and I consider it a Good Thing, even though I'm not
	   particularly good at discrete math.
	   
	h. Operating Systems
	     - Processes
		 - Threads
		 - Concurrency Issues
		 - Locks
		 - Mutexes
		 - Semaphores
		 - Deadlock, live lock and how to avoid them
		 - What resources a processes needs, and a thread needs, and how context switching works,
		   and how it's initiated by the operating system and underlying hardware.
		 - Know a little about scheduling. 
		 - The best, most practical book I've ever personally read on the subject is Doug Lea's Concurrent Programming in Java.
		
